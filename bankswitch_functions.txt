BANK 00
FN_00 DoPhases (TRM) (bus free, arbitrate, select, send cmd)
FN_10 EXEC SCSI DATA_IN (DoPhases, DataXin, get STATUS_MSG) 
FN_20 EXEC SCSI DATA_OUT (DoPhases, DataXout, get STATUS_MSG) 
FN_30 DoStatus (ext timeout) Get Status and Message
FN_40 DATA_IN and DoStatus (FN_10 without DoPhases)
FN_50 DATA_OUT and DoStatus (FN_20 without DoPhases)
FN_60 Return (C==0, A==0 success, C==1, A=ERROR_CODE fail)
FN_70 jump to basic entry point ($e000)
FN_80 next boot device (jmp to MON_SLOOP)
FN_90 PRODOS Read - only used in bank00
FN_A0 Get Status and Message with setting Timeout
FN_B0 DoPhases without BUS_FREE

BANK 01
FN_01 Data Xin - read data to BUF_PTR
FN_11 Data Xout - write data from BUF_PTR 
FN_21 copy LBA and other UNK to c8f5, TMP_PTR=$c8f5, then CALL DoStatus (FN_03) 
FN_31 read status and message - save status in CMD_STATUS
FN_41 Load CDB READ6 - 1 block at block LBA_c8db
FN_51 Load CDB WRITE6 - 1 block at block LBA_c8db 
FN_61 Prepare DMA receive
FN_71 Prepare DMA send
FN_81 DMA read IIe

BANK 02
FN_02 Process Smartport CMD 
FN_12 jump to FN_94 - restore ZP and return
FN_22 jump to FN_4F - print "SCSI BOOT ERROR" and run BASIC
FN_32 same as FN_42 - Decrement TIMEOUT3
FN_42 Decrement TIMEOUT3
FN_52 BUF_PTR=*(MEM_PTR+2), copy LBA to CDB, add PART_START to LBA ???
FN_62 same as FN_52

BANK 03
FN_03 Do Status (TRM) - seems inconsistent (REASSIGN_BLOCKS)
FN_13 rts only - Do nothing
FN_23 MODE_SENSE ($1A)
FN_33 SEND_CMD_RESERVE ($16)
FN_43 SEND_CMD_RELEASE ($17)
FN_53 READ_DEFECT_DATA ($37????)
FN_63 SEND_DIAGNOSTIC
FN_73 save timeouts to c8f5 and clear SDAT table
FN_83 restore timeouts from c8f5
FN_93 INQUIRY
FN_A3 SEND_CMD_TEST_UNIT_READY ($00) (load CDB, FN_00 (DoPhases), FN_30 (DoStatus), FN_39 (DoSense) if error)
FN_B3 SEND_CMD_REQUEST_SENSE ($03)
FN_C3 READ_CAPACITY
FN_D3 FORMAT_UNIT
FN_E3 RESET SCSI DEVICE
FN_F3 SEND_REQUEST_SENSE ($03)

BANK 04
FN_04 Read STATUS or MESSAGE
FN_14 Send SCSI CMD (from SCSI_CDB buffer at $c80e)
FN_24 DISPATCH SP_CMD_STATUS ($00) to all different status codes
FN_34 Wait for REQ and expect DATA IN
FN_44 Call FN_A3 (SEND_CMD_TEST_UNIT_READY) (and return $00 redundant)
FN_54 points to FN_34 (WAIT fro REQ and expect DATA IN)
FN_64 Prepare DMA DATA OUT
FN_74 ??? - seems unreferenced
FN_84 Copy PD_PAR_BUF into BUF_PTR
FN_94 Restore ZP and return
FN_A4 Get SDAT entry in TMP_PTR0 for index in $c800
FN_B4 IIgs LDIO DMA read ??????

BANK 05
FN_05 init card
FN_15 FN_35, FN_1C, FN_6A - TMP_PTR0=&SDAT[DEV_IDX], get PART_START and BLKSIZE from SDAT[DEV_IDX], BLK_NUMBER+=PART_START, memcpy($ca00,DIBTAB[DEV_IDX])
FN_25 get DEV_IDX from PD_UNIT, then fall through FN_75 
FN_35 load info from SDAT[DEV_IDX] entry (SEL_TARGET, PART_START, BLKSIZE, TIMEOUT)
FN_45 next boot device or error if last
FN_55 PDMA READ
FN_65 PDMA WRITE
FN_75 set TMP_PTR0=&SDAT[DEV_IDX-1] and fall through FN_85
FN_85 SET_BLK_COUNT from SDAT pointed by TMP_PTR0 and save CYAREG if IIgs
FN_95 fill new SDAT - sends TEST_UNIT_READY, READ_CAPACITY
FN_A5 second part of init - rescan bus ??? (only skip resetting RAM bank 1 and zero tables)
FN_B5 DMA read call FN_3C (IIgs) if ext call else call FN_81 (normal DMA)


BANK_06
FN_06 FORMAT unit and initialize PM if no PM detected
FN_16 - error recovery ????
FN_26 CALL FN_47 (Read DDM and master PDM) and check result - really needed???
FN_36 BUS_FREE and send TEST_UNIT_READY (FN_3A, arb, sel, FN_44) - BUS SCAN helper - only used in bank06
FN_46 try to call FN_36 up to 2 times - used in bus scan - only called once from bank05
FN_56 SEND TEST_UNIT_READY until ok or too many tries
FN_66 Process ASC from SENSE DATA at $c901

BANK_07
FN_07 - read/write to char devices - seems broken as it jumps to $cc95 which seems to lock up
FN_17 - Read DDM and master PDM - result in c8cf $00 if fail, $ff if ok 
FN_27 - points to FN_17
FN_37 - calls FN_4D (INQUIRY), fills SDAT and calls FN_59 or FN_69 (setblock 512 or 2048) based on device type
FN_47 - points to FN_17
FN_57 - Find empty SDAT entry - returns TMP_PTR0 point to first empty entry
FN_67 - Save TMP_PTR to $c8d7
FN_77 - restrore TMP_PTR from $c8d7

BANK 09
FN_09 - Smartport Read - not sure if this works 
FN_19 - Smartport Write - not sure if this works
FN_29 - LongData ??? (TRM)
FN_39 Send REQUEST_SENSE (FN_49) and process sense key and ASC if necessary
FN_49 - send REQUEST_SENSE and store the result at $c901
FN_59 - SETBLK_512 - calls FN_AA
FN_69 - SETBLK_2048 - calls FN_AA

BANK 0A
FN_0A - RETURN DIBTAB[DEV_IDX] entry to BUF_PTR (called from SP status 00 code 03)
FN_1A - RETURN DEVICE STATUS (called from SP status 00 code 00 with device !=0)
FN_2A EXECUTE TEST_UNIT_READY (special handling for tape) - adjust DEV_STATUS??
FN_3A jump to FN_AF - BUS_FREE (TRM)
FN_4A SET BLK SIZE - TMP_PTR points to SP parameter list
FN_5A MODE_SELECT ($15)
FN_6A TMP_PTR0=&DIBTAB[DEV_IDX], set DEV_STATUS and copy device status and block size to memory pointed by BUF_PTR_L
FN_7A copy DIBTAB entry from TMP_PTR0 to BUF_PTR omitting signature - Result for Control $00 Code $03/$04
FN_8A set DEV_STATUS, memcpy(BUF_PTR, TMP_PTR0+1, 4 or 5) (TMP_PTR0 points to DIBTAB[DEV_IDX]) - Result for Control $00 Code $00
FN_9A points to FN_2A
FN_AA EXECUTE SET_BLK_SIZE

BANK 0B
FN_0B
FN_1B SET_TIMEOUT
FN_2B
FN_3B - points to FN_2B
FN_4B WAIT_NOT_BUSY
FN_5B handle smartport control codes $16-$1e
FN_6B jsr to B1 $c806
FN_7B - points to FN_6B
FN_8B BUF_PTR=TMP_PTR[2];

BANK 0C
FN_0C Set_New_SDAT
FN_1C add partition start to BLK number
FN_2C send random data to SCSI bus until not busy (bug?)
FN_3C DMA read IIgs
FN_4C DMA write1 - need to understand the difference between 4C, 5C and 6C 
FN_5C DMA ext call IIgs
FN_6C DMA IIe
FN_7C if(CMD is RD or WR) { DEV_SIZE+=PART_START; if (DEV_STATUS==0xf8 (DIRECT_ACCESS)) DEV_SIZE+=5; }
FN_8C detect IIgs
FN_9C - call A4 and 85 - Get SDAT entry in TMP_PTR0 for DEV_IDX, SET_BLK_COUNT from SDAT pointed by TMP_PTR0 and save CYAREG if IIgs

BANK 0D
FN_0D UPDATED_DIBTAB_ENTRY - SEND INQUIRY and update DBITAB @ TMP_PTR0 (CALL FN_4D and FILL DIBTAB at TMP_PTR0 from inquiry data at $ca00) 
FN_1D FN_15, FN_BF 
FN_2D DMA READ_ALT ??? - try to use self modifying code if possible otherwise call FN_B5 - similar to FN_3F
FN_3D auto select XFER_MODE ($3 is override)
FN_4D send INQUIRY, save result at $ca00, restore initial state
FN_5D FORCE_PIO_MODE (set XFER_MODE to 3) and clear BUF_PTR_VH (force bank 00) - save XFER to $c80a, save VH to $c807, set c820 to $ff 

BANK 0E
FN_0E check if partition name @ BUF_PTR+$30 is "APPLE_prodos" or "apple PRODO" (or mix of the two, first 10 char only)
FN_1E handle smartport control codes $20-$2A
FN_2E EJECT ($C0)
FN_3E Get staus and message. Check for device not busy

BANK 0F
FN_0F init PDM entry @ BUF_PTR (size from $c8d2)
FN_1F init DDM
FN_2F init master PDM
FN_3F DMA READ - try to use self modifying code if possible otherwise call FN_B5
FN_4F print "SCSI BOOT ERROR" and run BASIC 
FN_5F read and discard data
FN_6F - handle disk change ??? - calls FN_0D (UPDATE DIBTAB), FN_7A (DIBTAB_CPY1)
FN_7F - handle disk change ??? - calls FN_0D (UPDATE_DIBTAB), FN_8A (DIBTAB_CPY2)
FN_8F seems the same as FN_A0 (Get Status and Message with setting Timeout)
FN_9F get message - second part of FN_A0 (no entry in bank 0) with some extra delay at the end
FN_AF BUS_FREE (return to BUS FREE. flush data if necessary)
FN_BF Set TMP_PTR and BUF_PTR to $ca00, check if device is online
